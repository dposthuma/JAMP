#!/usr/bin/env python
# encoding: utf-8
#
"""

"""
VERSION='1.0.24'

import sys
import math
import re
import os
import optparse
import subprocess
import logging
import random
import time

# Global logger object
logger=''

# Global prefix
j_prefix=''

# Adaptive thresholds: nperm: treshold
adaptive_thresholds = {
    10: 0.79,
    100: 0.38,
    1000: 0.06,
    10000: 0.006,
    100000: 0.002,
    1000000: 0.0002,
    10000000: 0.00002,
    100000000: 0.000002,
    1000000000: 0.0000002}

# Plink options b=boolean, l=long
popts = {'bfile':'l', 'file':'l', 'tfile':'l', 'lfile':'l', 'assoc':'b', 'linear':'b', 'logistic':'b', 'trend':'b', 'model':'b', 'fam':'l', 'covar':'l', 'covar_number':'l', 'dosage': 'l', 'silent': 'b', 'chr': 'l', 'extract': 'l', 'from': 'l', 'to': 'l', 'snp': 'l', 'window': 'l', 'snps': 'l', 'from-kb': 'l', 'to-kb': 'l', 'from-bp': 'l', 'to-bp': 'l', 'from-mb': 'l', 'to-mb': 'l', 'thin': 'l', 'range': 'b', 'attrib': 'l', 'gene': 'l', 'exclude': 'l'}

# Default plink options
plinkopts = '--noweb --silent '

# Extensions of resultfiles from the first run. Jamp will check if these exist
# when running --jstart
resultfiles = ['jamp.chr_snp', 'jamp.npheno_pheno_x', 'jamp.sumlogp']
    
def get_version():
    return VERSION


def pvals(prefix, pheno_result):
    '''Pvals gets the P values from column P, calculates the log10
    and writes the resulting val to a file with extension .logp'''
    logger.info("# Getting P values")
    count=0;
    result = []
    min_p = []
    logp_files = [] # Store logp files
    min_p_files = [] # Store min_p files
    for fn in pheno_result:
        count += 1
        f = open(fn)
        line = f.readline()
        
        # Get the column with the P values
        head = line.split()
        pcol = head.index('P')
        ct = 0
        for line in f:
            pval = line.split()[pcol]
            if pval == 'NA':
                pval = 1
            if count ==1:
                result.append(math.log10(float(pval)) * -1)
                min_p.append(float(pval))
            else:
                result[ct] += math.log10(float(pval)) * -1
                min_p[ct] = min(min_p[ct], float(pval))
            ct += 1
        f.close()
        
    logger.info("# Writing P value totals")
    
    # Write sumplogp
    try:
        w = open(prefix + '.sumlogp', 'w')
        for item in result:
            w.write("%s\n" % item)
        w.close()
        logp_files.append(prefix + '.sumlogp')
    except:
        bail("Failed to write " + prefix + '.sumlogp')
    
    try:
        w = open(prefix + '.min_p', 'w')
        for item in min_p:
            w.write("%s\n" % item)
        w.close()
        min_p_files.append(prefix + '.min_p')
    except:
        bail("Failed to write " + prefix + '.min_p')
        
    return logp_files, min_p_files
    
def setup_log(logfile):
    global logger
    
    # Check if we can write in OUT
    try:
        jlog = open(logfile,'w')
        jlog.close()
    except:
        print "Cannot write to " + logfile
        exit(-1)
        
    # set up logging to file
    logging.basicConfig(level=logging.DEBUG,
        format='%(asctime)s %(name)s %(levelname)-8s %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        filename=logfile,
        filemode='w')
        
    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    formatter = logging.Formatter('%(message)s')
    console.setFormatter(formatter)
    logging.getLogger('').addHandler(console)
    logger = logging.getLogger('JAMP')
    

def var_cb(option, opt_str, value, parser):
    '''Variable argument parser'''
    assert value is None
    value = ''
    cnt = 0
    def floatable(str):
        try:
            float(str)
            return True
        except ValueError:
            return False

    for arg in parser.rargs:
        # stop on --foo like options
        if arg[:2] == "--" and len(arg) > 2:
            break
        # stop on -a, but not on -3 or -3.0
        if arg[:1] == "-" and len(arg) > 1 and not floatable(arg):
            break
        value += " " + arg
        cnt += 1
    del parser.rargs[:cnt]
    setattr(parser.values, option.dest, value)


def bail(msg):
    logger.error(msg)
    print "Type " + sys.argv[0] + " --help for instructions";
    exit(-1)

def runplink(options, pheno_file, prefix, dosage = 0, pheno_count = 0):
    
    pheno_result = []
    if (dosage == 0):
        command = "plink %s --pheno %s --out %s" % (options, pheno_file, prefix)
        logger.info(command)
        try:
            status = subprocess.call(command.split(), shell=False)
        except:
            bail("Running plink failed: plink not found")
        if status: bail("Running plink failed")
        with open(prefix + '.log') as f:
            pheno_result = re.findall("results to.*\[ (.*) \]", f.read())        
    else:
        pheno_result = []
        for i in range( 1, pheno_count + 1):
            command = "plink %s --mpheno %s --pheno %s --out %s.P%s" % (options, i, pheno_file, prefix, i)
            logger.info(command)
            try:
                if subprocess.call(command.split(), shell=False):
                    bail("Running plink failed")
            except:
                bail("Running plink failed: plink not in PATH")
            with open("%s.P%s.log" % (prefix, i)) as f:
                pheno_result += re.findall("results to.*\[ (.*) \]", f.read())

    #Check if we have results
    if not pheno_result:
        bail("No result files, check your plink options")
        
    logger.info("# Result files: " + str(pheno_result))
    
    return pheno_result
    
def parse_options():
    usage = "usage: %prog [options]"
    p = optparse.OptionParser(usage=usage)
    
    # Loop through the plink options
    for popt, pkind in popts.iteritems():
        if pkind == 'b': # Boolean
            p.add_option(
                '--' + popt,
                action='store_true',
                help=optparse.SUPPRESS_HELP
                )
        elif pkind == 'l': # Option with arguments
                p.add_option(
                '--' + popt,
                action="callback", callback=var_cb, dest=popt,
                help=optparse.SUPPRESS_HELP
                )
        
    p.add_option(
        '--covar-number', # Optparse changes covar-number to covar_number
        help=optparse.SUPPRESS_HELP
        )
    p.add_option(
        '--all-pheno',
        action='store_true',
        )
    p.add_option(
      '--jperm',
      help='Number of permutations or permstart-permend, defaults to 100',
      type="string",
      default='100'
      )
    p.add_option(
        '--jpmin',
        help='todo: Some explanation',
        action='store_true',
    )
    p.add_option(
      '--pheno',
      help='Path to pheno file, default plink.pheno',
      metavar="FILE",
      default="plink.pheno"
      )
    p.add_option(
      '--out',
      default='multi',
      help='JAMP (and PLINK) prefix, recommended'
      )
    p.add_option(
        '--version', '-V', 
        action='store_true',
        help='Print the version of JAMP and exit.'
        )
    p.add_option(
        '--jstart',
        help='Prefix for %s' % " ".join(resultfiles)
        )
    p.add_option(
        '--adaptive',
        action='store_true',
        help='run jamp adaptive')
    p.add_option(
        '--jmerge',
        action="callback", callback=var_cb, dest='jmerge',
        help='Merge multiple empp files')
    
    options, arguments = p.parse_args()
    
    return options
    
def jmerge(filelist, outfile):
    '''Combine mutiple empp files from different runs'''
    files = filelist.split()
    if len(files) < 2:
        bail("Please provide at least 2 files with --jmerge")
        
    # Read first file into memory
    file = files.pop(0)
    arr = []
    logger.info("Reading %s" % file)
    
    try:
        with open(file) as f:
            # Get header
            head = f.readline().split()
            nperms_col = head.index('NPERMS')
            mergecols = len(head) - nperms_col - 1
            logger.info("Found %s cols" % mergecols)
            emp_col = nperms_col + 1
            emp_c_col = nperms_col + 2
            empminp_col = nperms_col + 3
            empminp_c_col = nperms_col + 4
            # Get the rest
            for line in f:
                row = line.split()
                perm = int(row[nperms_col])
                arr.append(row[:nperms_col] + [perm, float(row[emp_col]) * perm, float(row[emp_c_col]) * perm, float(row[empminp_col]) * perm, float(row[empminp_c_col]) * perm])
    except:
        bail("Error reading %s" % file)
    
    logger.info("Read %s lines" % len(arr))
    
    # Process other files
    for file in files:
        with open(file) as f:
            logger.info("Reading %s" % file)
            if(len(f.readline().split()) != len(head)):
                bail("File %s has a different header")
            c=0
            for line in f:
                row = line.split()
                perm = int(row[nperms_col])
                arr[c][nperms_col] += perm
                arr[c][emp_col] += float(row[emp_col]) * perm
                arr[c][emp_c_col] += float(row[emp_c_col]) * perm
                arr[c][empminp_col] += float(row[empminp_col]) * perm
                arr[c][empminp_c_col] += float(row[empminp_c_col]) * perm
                c += 1
    try:
        with open(outfile, 'w') as w:
            w.write("%s\n" % " ".join(head))
            for i in arr:
                perm = i[nperms_col]
                i[emp_col] = i[emp_col] / perm
                i[emp_c_col] = i[emp_c_col] / perm
                i[empminp_col] = i[empminp_col] / perm
                i[empminp_c_col] = i[empminp_c_col] / perm
                w.write("%s\n" % " ".join(map(str, i)))    
    except:
        bail("Failed to write to %s" % outfile)
        
    logger.info("Done: wrote merged file to %s" % outfile)
    
    exit(0)

def permute(options, permstart, permend):

    global plinkopts

    permtotal = permend - permstart + 1
    if permtotal < 1:
        bail("Total permutations should be more than 0")

    # Float of permtotal used for float calculations
    fpermtotal = float(permtotal)
    
    # Split pheno file and get number of phenotypes from pheno file
    logger.info("# Get number of phenotypes from " + options.pheno)
    with open(options.pheno) as f:
        pheno_count = len(f.readline().split()) - 2
        
    if pheno_count < 1:
        bail("Number of phenotypes in " + options.pheno + " is 0")

    # Add plinkoptions
    for p, k in popts.iteritems():
        v = getattr(options, p)
        if p == 'covar_number':
            p = 'covar-number'
        if v:
            plinkopts += " --" + p
            if k != 'b':
                plinkopts += " " + str(v)
    
    # Plink does not process --all-pheno when running --dosage
    # so we're not including --all-pheno to plinkopts when --dosage
    # is present
    if not options.dosage:
        plinkopts += " --all-pheno"

    # Print arguments
    logger.info("")
    logger.info("## Arguments ##")
    logger.info("# plinkoptions: %s" % plinkopts)
    logger.info("# pheno file  : %s" % options.pheno)
    logger.info("# phenotypes  : %s" % pheno_count)
    logger.info("# permutations: %s-%s" % (permstart,permend))
    
            
    if not options.jstart:
        # Run plink with the correct pheno file
        pheno_result = runplink(plinkopts, options.pheno, options.out, options.dosage, pheno_count)
    
        pvals(j_prefix, pheno_result)
    
        # Split plink output, to be used later
        logger.info("# Split plink output")
        with open(pheno_result[0],'r') as f:
            with open(j_prefix + ".chr_snp", 'w') as w:
                for line in f:
                    w.write(" ".join(line.split()[:2]) + "\n")
            
        logger.info('# Get pvals of each phenotype')
        first = 1
        vals = []
        for fn in pheno_result:
            with open(fn, 'r') as f:
                line = f.readline()
                pcol = line.split().index('P')
                c = 0
                for line in f:
                    if first == 1:
                        vals.append([line.split()[pcol]])
                    else:
                        vals[c].append(line.split()[pcol])
                    c += 1
                first = 0
    
        logger.info('# Writing ' + j_prefix + '.npheno_pheno_x')
        with open(j_prefix + '.npheno_pheno_x', 'w') as f:
            f.write("NPHENO " + ' '.join(['P_P' + elt for elt in map(str, range(1, pheno_count + 1))]) + "\n")
            for item in vals:
                f.write(str(pheno_count) + " " + (" ".join(item)) + "\n")
    else:
        # Check if there are already result files for first run
        for ext in resultfiles:
            path = options.jstart + '.' + ext
            if not os.path.exists(path):
                bail("--jstart defined, but %s not found." % path)
        logger.info("# Found first run files %s, skipping to permutations" % " ".join(resultfiles))
    ###
    
    logger.info("## Starting permutations")
    # read phenotypes
    head = []
    vals = []
    with open(options.pheno) as f:
        for line in f:
            arr = line.split()
            head.append(arr[:2])
            vals.append(arr[2:])
    c = permstart
    logp_files = []
    min_p_files = []
    while c <= permend:
        logger.info("# Permutation %s of %s" % (c, permend))
        
        # Initialize seed
        random.seed(c)
        
        # Shuffle phenotypes
        random.shuffle(vals)
        
        # write to file
        with open(j_prefix + '.pheno_perm', 'w') as f:
            for i, h in enumerate(head):
                f.write(" ".join(h) + " " + " ".join(vals[i]) + "\n")
            
        # Run plink
        pheno_result = runplink(plinkopts, j_prefix + '.pheno_perm', options.out, options.dosage, pheno_count)
        
        # Get pvals
        logp, min_p = pvals("%s.perm%s" % (j_prefix, c), pheno_result)
        
        # Add filenames to array
        logp_files += logp
        min_p_files += min_p
        
        c += 1
    # Clear large arrays
    vals = head = ''
    
    logger.info("## JAMP: Permutations done")
    
    ########################## SUMLOGP ###########################
        
    # Load non-permuted sumlogp
    sumlogp = []
    with open(j_prefix + '.sumlogp') as f:
        for i in f: sumlogp.append(float(i.strip()))
    
    # Loop through permuted logp files and count and store max logp per perm
    emp = [0]*len(sumlogp)
    maxlist=[]
    for p in logp_files:
        with open(p) as f:
            maxval=0
            for i,s in enumerate(sumlogp):
                pp = float(f.next().strip())
                emp[i] += pp >= s
                maxval = max(maxval, pp)
            maxlist.append(maxval)
    #print maxlist
    
    # Write maxlist
    with open("%s.maxsumlogp" % j_prefix, 'w') as w:
        for item in maxlist:
          w.write("%s " % item)
        w.write("\n")
        
    ########################### MIN_P ###########################
    
    # Load non-permuted min_p
    min_p = []
    with open(j_prefix + '.min_p') as f:
        for i in f: min_p.append(float(i.strip()))
    
    minp = [0]*len(min_p)
    minlist=[]
    for p in min_p_files:
        with open(p) as f:
            minval=1
            for i,s in enumerate(min_p):
                pp = float(f.next().strip())
                minp[i] += pp <= s
                minval = min(minval, pp)
            minlist.append(minval)
    #print minp
    
    # Write minlist
    with open("%s.minpmin" % j_prefix, 'w') as w:
        for item in maxlist:
          w.write("%s " % item)
        w.write("\n")

    ########################### BUILD ###########################

        
    for x, y in enumerate(emp):
        c=0
        m=0
        for i in maxlist:
            c += int(i >= sumlogp[x])
        for i in minlist:
            m += int(i <= min_p[x])
        emp[x] = "%s %s %s %s %s %s" % (sumlogp[x], permtotal, emp[x]/fpermtotal, c/fpermtotal, minp[x]/fpermtotal, m/fpermtotal)

    # Add header
    emp.insert(0, 'SUMLOGP NPERMS EMP_P EMP_P_COR EMP_Pmin EMP_Pmincorr')
    
    
    
    ########################### WRITE EMPP ###########################
    
    with open("%s.empp" % j_prefix, 'w') as w:
        with open("%s.chr_snp" % j_prefix) as csnp:
            with open("%s.npheno_pheno_x" % j_prefix) as f:
                for i in emp:
                    w.write("%s %s %s\n" % (csnp.next().strip(), f.next().strip(), i.strip()))
        
    
############################### Main ###############################

def main():
    '''Main'''

    global j_prefix
    
    start = time.time()
    
    # Variables
    pheno_header="pheno_header"
    pheno_types="pheno_types"
    
    # Parse options
    options = parse_options()
    
    # Jamp prefix
    j_prefix = options.out + ".jamp"
    
    # Setup logging        
    setup_log(j_prefix + ".log")
    
    if options.version:
        print get_version()
        exit(0)
    
    if options.jmerge != None:
        jmerge(options.jmerge, j_prefix + '.merged')
        exit(0)
        
    vers = "## JAMP V%s Started ##" % get_version()
    logger.info("#"*len(vers))
    logger.info(vers)
    logger.info("#"*len(vers))
    
    
    if not os.path.exists(options.pheno):
        bail("Can't find pheno file: " + options.pheno)
    if not options.jperm:
        bail("Please specify permutations")
    if options.dosage:
        options.dosage = 1
    else:
        options.dosage = 0
    
    if options.adaptive:
        print "Adaptive run"
        exit(0)

    # Get permutations
    perms = options.jperm.split('-')
    if len(perms) == 1:
        permstart = 1
        permend = int(perms[0])
    else:
        permstart = int(perms[0])
        permend = int(perms[1])
        
    # Call permutator
    permute(options, permstart, permend)

    logger.info("## JAMP: Done. Processing took %.2f sec. Output in %s.empp" % (time.time() - start, j_prefix))
  
        
if __name__ == '__main__':
    main()

